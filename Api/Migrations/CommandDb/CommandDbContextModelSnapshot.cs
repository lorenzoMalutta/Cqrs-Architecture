// <auto-generated />
using System;
using Command.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cqrs_architecture.Migrations.CommandDb
{
    [DbContext(typeof(CommandDbContext))]
    partial class CommandDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Command.Entity.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUtcIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUtcUpd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserIn")
                        .HasColumnType("text");

                    b.Property<string>("UserUpd")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Command.Entity.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateUtcIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUtcUpd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserIn")
                        .HasColumnType("text");

                    b.Property<string>("UserUpd")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Command.Entity.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUtcIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUtcUpd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserIn")
                        .HasColumnType("text");

                    b.Property<string>("UserUpd")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("TracksId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("Command.Entity.Tracks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateUtcIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUtcUpd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MusicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserIn")
                        .HasColumnType("text");

                    b.Property<string>("UserUpd")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Command.Entity.Album", b =>
                {
                    b.HasOne("Command.Entity.Artist", "Artist")
                        .WithMany("Album")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Command.Entity.Music", b =>
                {
                    b.HasOne("Command.Entity.Album", "Album")
                        .WithMany("Music")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Command.Entity.Tracks", "Tracks")
                        .WithMany("Music")
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Command.Entity.Tracks", b =>
                {
                    b.HasOne("Command.Entity.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Command.Entity.Album", b =>
                {
                    b.Navigation("Music");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Command.Entity.Artist", b =>
                {
                    b.Navigation("Album");
                });

            modelBuilder.Entity("Command.Entity.Tracks", b =>
                {
                    b.Navigation("Music");
                });
#pragma warning restore 612, 618
        }
    }
}
